/*
 * This file is generated by jOOQ.
 */
package cn.edu.nju.teamwiki.jooq.tables;


import cn.edu.nju.teamwiki.jooq.Indexes;
import cn.edu.nju.teamwiki.jooq.Keys;
import cn.edu.nju.teamwiki.jooq.TeamWiki;
import cn.edu.nju.teamwiki.jooq.tables.records.AnnouncementRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Announcement extends TableImpl<AnnouncementRecord> {

    private static final long serialVersionUID = -666316411;

    /**
     * The reference instance of <code>team_wiki.announcement</code>
     */
    public static final Announcement ANNOUNCEMENT = new Announcement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnouncementRecord> getRecordType() {
        return AnnouncementRecord.class;
    }

    /**
     * The column <code>team_wiki.announcement.announcement_id</code>.
     */
    public final TableField<AnnouncementRecord, Integer> ANNOUNCEMENT_ID = createField(DSL.name("announcement_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>team_wiki.announcement.content</code>.
     */
    public final TableField<AnnouncementRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>team_wiki.announcement.publish_time</code>.
     */
    public final TableField<AnnouncementRecord, LocalDateTime> PUBLISH_TIME = createField(DSL.name("publish_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>team_wiki.announcement</code> table reference
     */
    public Announcement() {
        this(DSL.name("announcement"), null);
    }

    /**
     * Create an aliased <code>team_wiki.announcement</code> table reference
     */
    public Announcement(String alias) {
        this(DSL.name(alias), ANNOUNCEMENT);
    }

    /**
     * Create an aliased <code>team_wiki.announcement</code> table reference
     */
    public Announcement(Name alias) {
        this(alias, ANNOUNCEMENT);
    }

    private Announcement(Name alias, Table<AnnouncementRecord> aliased) {
        this(alias, aliased, null);
    }

    private Announcement(Name alias, Table<AnnouncementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Announcement(Table<O> child, ForeignKey<O, AnnouncementRecord> key) {
        super(child, key, ANNOUNCEMENT);
    }

    @Override
    public Schema getSchema() {
        return TeamWiki.TEAM_WIKI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ANNOUNCEMENT_ANNOUNCEMENT_ID, Indexes.ANNOUNCEMENT_PRIMARY);
    }

    @Override
    public Identity<AnnouncementRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ANNOUNCEMENT;
    }

    @Override
    public UniqueKey<AnnouncementRecord> getPrimaryKey() {
        return Keys.KEY_ANNOUNCEMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnnouncementRecord>> getKeys() {
        return Arrays.<UniqueKey<AnnouncementRecord>>asList(Keys.KEY_ANNOUNCEMENT_PRIMARY, Keys.KEY_ANNOUNCEMENT_ANNOUNCEMENT_ID);
    }

    @Override
    public Announcement as(String alias) {
        return new Announcement(DSL.name(alias), this);
    }

    @Override
    public Announcement as(Name alias) {
        return new Announcement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Announcement rename(String name) {
        return new Announcement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Announcement rename(Name name) {
        return new Announcement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
