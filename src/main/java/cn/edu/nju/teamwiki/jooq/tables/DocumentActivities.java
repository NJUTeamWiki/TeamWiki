/*
 * This file is generated by jOOQ.
 */
package cn.edu.nju.teamwiki.jooq.tables;


import cn.edu.nju.teamwiki.jooq.Indexes;
import cn.edu.nju.teamwiki.jooq.Keys;
import cn.edu.nju.teamwiki.jooq.TeamWiki;
import cn.edu.nju.teamwiki.jooq.tables.records.DocumentActivitiesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentActivities extends TableImpl<DocumentActivitiesRecord> {

    private static final long serialVersionUID = -550635613;

    /**
     * The reference instance of <code>team_wiki.document_activities</code>
     */
    public static final DocumentActivities DOCUMENT_ACTIVITIES = new DocumentActivities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentActivitiesRecord> getRecordType() {
        return DocumentActivitiesRecord.class;
    }

    /**
     * The column <code>team_wiki.document_activities.document_id</code>.
     */
    public final TableField<DocumentActivitiesRecord, String> DOCUMENT_ID = createField(DSL.name("document_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>team_wiki.document_activities.user_id</code>.
     */
    public final TableField<DocumentActivitiesRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>team_wiki.document_activities.action</code>.
     */
    public final TableField<DocumentActivitiesRecord, String> ACTION = createField(DSL.name("action"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>team_wiki.document_activities.time</code>.
     */
    public final TableField<DocumentActivitiesRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>team_wiki.document_activities</code> table reference
     */
    public DocumentActivities() {
        this(DSL.name("document_activities"), null);
    }

    /**
     * Create an aliased <code>team_wiki.document_activities</code> table reference
     */
    public DocumentActivities(String alias) {
        this(DSL.name(alias), DOCUMENT_ACTIVITIES);
    }

    /**
     * Create an aliased <code>team_wiki.document_activities</code> table reference
     */
    public DocumentActivities(Name alias) {
        this(alias, DOCUMENT_ACTIVITIES);
    }

    private DocumentActivities(Name alias, Table<DocumentActivitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentActivities(Name alias, Table<DocumentActivitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DocumentActivities(Table<O> child, ForeignKey<O, DocumentActivitiesRecord> key) {
        super(child, key, DOCUMENT_ACTIVITIES);
    }

    @Override
    public Schema getSchema() {
        return TeamWiki.TEAM_WIKI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCUMENT_ACTIVITIES_PRIMARY);
    }

    @Override
    public UniqueKey<DocumentActivitiesRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_ACTIVITIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<DocumentActivitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<DocumentActivitiesRecord>>asList(Keys.KEY_DOCUMENT_ACTIVITIES_PRIMARY);
    }

    @Override
    public DocumentActivities as(String alias) {
        return new DocumentActivities(DSL.name(alias), this);
    }

    @Override
    public DocumentActivities as(Name alias) {
        return new DocumentActivities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentActivities rename(String name) {
        return new DocumentActivities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentActivities rename(Name name) {
        return new DocumentActivities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Integer, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
