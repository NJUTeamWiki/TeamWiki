/*
 * This file is generated by jOOQ.
 */
package cn.edu.nju.teamwiki.jooq.tables;


import cn.edu.nju.teamwiki.jooq.Indexes;
import cn.edu.nju.teamwiki.jooq.Keys;
import cn.edu.nju.teamwiki.jooq.TeamWiki;
import cn.edu.nju.teamwiki.jooq.tables.records.DocumentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Document extends TableImpl<DocumentRecord> {

    private static final long serialVersionUID = 346123750;

    /**
     * The reference instance of <code>team_wiki.document</code>
     */
    public static final Document DOCUMENT = new Document();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentRecord> getRecordType() {
        return DocumentRecord.class;
    }

    /**
     * The column <code>team_wiki.document.d_id</code>.
     */
    public final TableField<DocumentRecord, String> D_ID = createField(DSL.name("d_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>team_wiki.document.d_name</code>.
     */
    public final TableField<DocumentRecord, String> D_NAME = createField(DSL.name("d_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>team_wiki.document.uploader</code>.
     */
    public final TableField<DocumentRecord, Integer> UPLOADER = createField(DSL.name("uploader"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>team_wiki.document.uploaded_time</code>.
     */
    public final TableField<DocumentRecord, LocalDateTime> UPLOADED_TIME = createField(DSL.name("uploaded_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>team_wiki.document.modified_time</code>.
     */
    public final TableField<DocumentRecord, LocalDateTime> MODIFIED_TIME = createField(DSL.name("modified_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>team_wiki.document.source_type</code>.
     */
    public final TableField<DocumentRecord, Integer> SOURCE_TYPE = createField(DSL.name("source_type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>team_wiki.document.source_id</code>.
     */
    public final TableField<DocumentRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>team_wiki.document</code> table reference
     */
    public Document() {
        this(DSL.name("document"), null);
    }

    /**
     * Create an aliased <code>team_wiki.document</code> table reference
     */
    public Document(String alias) {
        this(DSL.name(alias), DOCUMENT);
    }

    /**
     * Create an aliased <code>team_wiki.document</code> table reference
     */
    public Document(Name alias) {
        this(alias, DOCUMENT);
    }

    private Document(Name alias, Table<DocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Document(Name alias, Table<DocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Document(Table<O> child, ForeignKey<O, DocumentRecord> key) {
        super(child, key, DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return TeamWiki.TEAM_WIKI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCUMENT_D_ID, Indexes.DOCUMENT_DOCUMENT_SOURCE_FK, Indexes.DOCUMENT_PRIMARY);
    }

    @Override
    public UniqueKey<DocumentRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DocumentRecord>> getKeys() {
        return Arrays.<UniqueKey<DocumentRecord>>asList(Keys.KEY_DOCUMENT_PRIMARY, Keys.KEY_DOCUMENT_D_ID);
    }

    @Override
    public List<ForeignKey<DocumentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DocumentRecord, ?>>asList(Keys.DOCUMENT_SOURCE_FK);
    }

    public Source source() {
        return new Source(this, Keys.DOCUMENT_SOURCE_FK);
    }

    @Override
    public Document as(String alias) {
        return new Document(DSL.name(alias), this);
    }

    @Override
    public Document as(Name alias) {
        return new Document(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Document rename(String name) {
        return new Document(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Document rename(Name name) {
        return new Document(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, Integer, LocalDateTime, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
