/*
 * This file is generated by jOOQ.
 */
package cn.edu.nju.teamwiki.jooq.tables;


import cn.edu.nju.teamwiki.jooq.Indexes;
import cn.edu.nju.teamwiki.jooq.Keys;
import cn.edu.nju.teamwiki.jooq.TeamWiki;
import cn.edu.nju.teamwiki.jooq.tables.records.ShareRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Share extends TableImpl<ShareRecord> {

    private static final long serialVersionUID = -1737216400;

    /**
     * The reference instance of <code>team_wiki.share</code>
     */
    public static final Share SHARE = new Share();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShareRecord> getRecordType() {
        return ShareRecord.class;
    }

    /**
     * The column <code>team_wiki.share.share_id</code>.
     */
    public final TableField<ShareRecord, Integer> SHARE_ID = createField(DSL.name("share_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>team_wiki.share.share_title</code>.
     */
    public final TableField<ShareRecord, String> SHARE_TITLE = createField(DSL.name("share_title"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>team_wiki.share.share_content</code>.
     */
    public final TableField<ShareRecord, String> SHARE_CONTENT = createField(DSL.name("share_content"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>team_wiki.share.share_user</code>.
     */
    public final TableField<ShareRecord, Integer> SHARE_USER = createField(DSL.name("share_user"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>team_wiki.share.share_time</code>.
     */
    public final TableField<ShareRecord, LocalDateTime> SHARE_TIME = createField(DSL.name("share_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>team_wiki.share</code> table reference
     */
    public Share() {
        this(DSL.name("share"), null);
    }

    /**
     * Create an aliased <code>team_wiki.share</code> table reference
     */
    public Share(String alias) {
        this(DSL.name(alias), SHARE);
    }

    /**
     * Create an aliased <code>team_wiki.share</code> table reference
     */
    public Share(Name alias) {
        this(alias, SHARE);
    }

    private Share(Name alias, Table<ShareRecord> aliased) {
        this(alias, aliased, null);
    }

    private Share(Name alias, Table<ShareRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Share(Table<O> child, ForeignKey<O, ShareRecord> key) {
        super(child, key, SHARE);
    }

    @Override
    public Schema getSchema() {
        return TeamWiki.TEAM_WIKI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHARE_PRIMARY, Indexes.SHARE_SHARE_ID, Indexes.SHARE_SHARE_USER_FK);
    }

    @Override
    public Identity<ShareRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SHARE;
    }

    @Override
    public UniqueKey<ShareRecord> getPrimaryKey() {
        return Keys.KEY_SHARE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ShareRecord>> getKeys() {
        return Arrays.<UniqueKey<ShareRecord>>asList(Keys.KEY_SHARE_PRIMARY, Keys.KEY_SHARE_SHARE_ID);
    }

    @Override
    public List<ForeignKey<ShareRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ShareRecord, ?>>asList(Keys.SHARE_USER_FK);
    }

    public User user() {
        return new User(this, Keys.SHARE_USER_FK);
    }

    @Override
    public Share as(String alias) {
        return new Share(DSL.name(alias), this);
    }

    @Override
    public Share as(Name alias) {
        return new Share(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Share rename(String name) {
        return new Share(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Share rename(Name name) {
        return new Share(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
