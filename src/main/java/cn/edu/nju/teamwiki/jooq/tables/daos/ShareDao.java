/*
 * This file is generated by jOOQ.
 */
package cn.edu.nju.teamwiki.jooq.tables.daos;


import cn.edu.nju.teamwiki.jooq.tables.Share;
import cn.edu.nju.teamwiki.jooq.tables.records.ShareRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ShareDao extends DAOImpl<ShareRecord, cn.edu.nju.teamwiki.jooq.tables.pojos.Share, Integer> {

    /**
     * Create a new ShareDao without any configuration
     */
    public ShareDao() {
        super(Share.SHARE, cn.edu.nju.teamwiki.jooq.tables.pojos.Share.class);
    }

    /**
     * Create a new ShareDao with an attached configuration
     */
    @Autowired
    public ShareDao(Configuration configuration) {
        super(Share.SHARE, cn.edu.nju.teamwiki.jooq.tables.pojos.Share.class, configuration);
    }

    @Override
    public Integer getId(cn.edu.nju.teamwiki.jooq.tables.pojos.Share object) {
        return object.getShareId();
    }

    /**
     * Fetch records that have <code>share_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Share> fetchRangeOfShareId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Share.SHARE.SHARE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>share_id IN (values)</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Share> fetchByShareId(Integer... values) {
        return fetch(Share.SHARE.SHARE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>share_id = value</code>
     */
    public cn.edu.nju.teamwiki.jooq.tables.pojos.Share fetchOneByShareId(Integer value) {
        return fetchOne(Share.SHARE.SHARE_ID, value);
    }

    /**
     * Fetch records that have <code>share_title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Share> fetchRangeOfShareTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Share.SHARE.SHARE_TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>share_title IN (values)</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Share> fetchByShareTitle(String... values) {
        return fetch(Share.SHARE.SHARE_TITLE, values);
    }

    /**
     * Fetch records that have <code>share_content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Share> fetchRangeOfShareContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(Share.SHARE.SHARE_CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>share_content IN (values)</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Share> fetchByShareContent(String... values) {
        return fetch(Share.SHARE.SHARE_CONTENT, values);
    }

    /**
     * Fetch records that have <code>share_user BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Share> fetchRangeOfShareUser(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Share.SHARE.SHARE_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>share_user IN (values)</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Share> fetchByShareUser(Integer... values) {
        return fetch(Share.SHARE.SHARE_USER, values);
    }

    /**
     * Fetch records that have <code>share_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Share> fetchRangeOfShareTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Share.SHARE.SHARE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>share_time IN (values)</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Share> fetchByShareTime(LocalDateTime... values) {
        return fetch(Share.SHARE.SHARE_TIME, values);
    }
}
