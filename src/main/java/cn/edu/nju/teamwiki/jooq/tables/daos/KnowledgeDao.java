/*
 * This file is generated by jOOQ.
 */
package cn.edu.nju.teamwiki.jooq.tables.daos;


import cn.edu.nju.teamwiki.jooq.tables.Knowledge;
import cn.edu.nju.teamwiki.jooq.tables.records.KnowledgeRecord;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * A table to contain all knowledge
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KnowledgeDao extends DAOImpl<KnowledgeRecord, cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge, Integer> {

    /**
     * Create a new KnowledgeDao without any configuration
     */
    public KnowledgeDao() {
        super(Knowledge.KNOWLEDGE, cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge.class);
    }

    /**
     * Create a new KnowledgeDao with an attached configuration
     */
    public KnowledgeDao(Configuration configuration) {
        super(Knowledge.KNOWLEDGE, cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge.class, configuration);
    }

    @Override
    public Integer getId(cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge object) {
        return object.getKId();
    }

    /**
     * Fetch records that have <code>k_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge> fetchRangeOfKId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Knowledge.KNOWLEDGE.K_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>k_id IN (values)</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge> fetchByKId(Integer... values) {
        return fetch(Knowledge.KNOWLEDGE.K_ID, values);
    }

    /**
     * Fetch a unique record that has <code>k_id = value</code>
     */
    public cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge fetchOneByKId(Integer value) {
        return fetchOne(Knowledge.KNOWLEDGE.K_ID, value);
    }

    /**
     * Fetch records that have <code>k_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge> fetchRangeOfKName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Knowledge.KNOWLEDGE.K_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>k_name IN (values)</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge> fetchByKName(String... values) {
        return fetch(Knowledge.KNOWLEDGE.K_NAME, values);
    }

    /**
     * Fetch records that have <code>storage_path BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge> fetchRangeOfStoragePath(String lowerInclusive, String upperInclusive) {
        return fetchRange(Knowledge.KNOWLEDGE.STORAGE_PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>storage_path IN (values)</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge> fetchByStoragePath(String... values) {
        return fetch(Knowledge.KNOWLEDGE.STORAGE_PATH, values);
    }

    /**
     * Fetch records that have <code>uploader BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge> fetchRangeOfUploader(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Knowledge.KNOWLEDGE.UPLOADER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uploader IN (values)</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge> fetchByUploader(Integer... values) {
        return fetch(Knowledge.KNOWLEDGE.UPLOADER, values);
    }

    /**
     * Fetch records that have <code>upload_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge> fetchRangeOfUploadTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Knowledge.KNOWLEDGE.UPLOAD_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>upload_time IN (values)</code>
     */
    public List<cn.edu.nju.teamwiki.jooq.tables.pojos.Knowledge> fetchByUploadTime(LocalDateTime... values) {
        return fetch(Knowledge.KNOWLEDGE.UPLOAD_TIME, values);
    }
}
