/*
 * This file is generated by jOOQ.
 */
package cn.edu.nju.teamwiki.jooq.tables;


import cn.edu.nju.teamwiki.jooq.Indexes;
import cn.edu.nju.teamwiki.jooq.Keys;
import cn.edu.nju.teamwiki.jooq.TeamWiki;
import cn.edu.nju.teamwiki.jooq.tables.records.KnowledgeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * A table to contain all knowledge
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Knowledge extends TableImpl<KnowledgeRecord> {

    private static final long serialVersionUID = 1766157197;

    /**
     * The reference instance of <code>team_wiki.knowledge</code>
     */
    public static final Knowledge KNOWLEDGE = new Knowledge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KnowledgeRecord> getRecordType() {
        return KnowledgeRecord.class;
    }

    /**
     * The column <code>team_wiki.knowledge.k_id</code>.
     */
    public final TableField<KnowledgeRecord, Integer> K_ID = createField(DSL.name("k_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>team_wiki.knowledge.k_name</code>.
     */
    public final TableField<KnowledgeRecord, String> K_NAME = createField(DSL.name("k_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>team_wiki.knowledge.storage_path</code>.
     */
    public final TableField<KnowledgeRecord, String> STORAGE_PATH = createField(DSL.name("storage_path"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>team_wiki.knowledge.uploader</code>.
     */
    public final TableField<KnowledgeRecord, Integer> UPLOADER = createField(DSL.name("uploader"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>team_wiki.knowledge.upload_time</code>.
     */
    public final TableField<KnowledgeRecord, LocalDateTime> UPLOAD_TIME = createField(DSL.name("upload_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>team_wiki.knowledge</code> table reference
     */
    public Knowledge() {
        this(DSL.name("knowledge"), null);
    }

    /**
     * Create an aliased <code>team_wiki.knowledge</code> table reference
     */
    public Knowledge(String alias) {
        this(DSL.name(alias), KNOWLEDGE);
    }

    /**
     * Create an aliased <code>team_wiki.knowledge</code> table reference
     */
    public Knowledge(Name alias) {
        this(alias, KNOWLEDGE);
    }

    private Knowledge(Name alias, Table<KnowledgeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Knowledge(Name alias, Table<KnowledgeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A table to contain all knowledge"));
    }

    public <O extends Record> Knowledge(Table<O> child, ForeignKey<O, KnowledgeRecord> key) {
        super(child, key, KNOWLEDGE);
    }

    @Override
    public Schema getSchema() {
        return TeamWiki.TEAM_WIKI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.KNOWLEDGE_K_ID, Indexes.KNOWLEDGE_PRIMARY, Indexes.KNOWLEDGE_USER_FK);
    }

    @Override
    public Identity<KnowledgeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_KNOWLEDGE;
    }

    @Override
    public UniqueKey<KnowledgeRecord> getPrimaryKey() {
        return Keys.KEY_KNOWLEDGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<KnowledgeRecord>> getKeys() {
        return Arrays.<UniqueKey<KnowledgeRecord>>asList(Keys.KEY_KNOWLEDGE_PRIMARY, Keys.KEY_KNOWLEDGE_K_ID);
    }

    @Override
    public List<ForeignKey<KnowledgeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<KnowledgeRecord, ?>>asList(Keys.USER_FK);
    }

    public User user() {
        return new User(this, Keys.USER_FK);
    }

    @Override
    public Knowledge as(String alias) {
        return new Knowledge(DSL.name(alias), this);
    }

    @Override
    public Knowledge as(Name alias) {
        return new Knowledge(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Knowledge rename(String name) {
        return new Knowledge(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Knowledge rename(Name name) {
        return new Knowledge(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
